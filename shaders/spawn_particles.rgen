#version 460
#extension GL_EXT_ray_tracing : require

// Push constants passed from the application:
layout(push_constant) uniform PushConstants {
	mat4  mSpawnTransformation;
    float mSpawnAngleRad;
    float mNewParticlesRadius;
} pushConstants;

// The acceleration structure:
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

// The buffer, we will store our candidate positions into:
layout(set = 0, binding = 1) buffer ParticleCandidates
{
	vec4 mPositions[];
} particleCandidates;

layout(location = 0) rayPayloadEXT vec3 newParticleCoords; // payload to traceRayEXT

void main() 
{
    // Without modification, our rays are constructed like a cone pointing in +Z direction:
    float numRaysOneDim = sqrt(gl_LaunchSizeEXT.x);
    uint rayZ = gl_LaunchIDEXT.x / uint(numRaysOneDim);
    uint rayX = gl_LaunchIDEXT.x - rayZ * uint(numRaysOneDim);
    vec3 rayDirection;
    rayDirection.x = -numRaysOneDim * 0.5 + rayX;
    rayDirection.y = -numRaysOneDim / tan(pushConstants.mSpawnAngleRad);
    rayDirection.z = -numRaysOneDim * 0.5 + rayZ;
	
    vec3 rayOrigin = (pushConstants.mSpawnTransformation * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    rayDirection = normalize(mat3(pushConstants.mSpawnTransformation) * rayDirection);

    uint rayFlags = gl_RayFlagsOpaqueEXT;
    uint cullMask = 0xff;
    float tmin = 0.001;
    float tmax = 1000.0;
    traceRayEXT(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 1 /*sbtRecordStride*/, 0 /*missIndex*/, rayOrigin, tmin, rayDirection, tmax, 0 /*payload*/);
    // ^ newParticleCoords (referred to via payload-location 0) contains the result of the traceRayEXT call.

    // Just store the result and be done with it:
    particleCandidates.mPositions[gl_LaunchIDEXT.x] = vec4(newParticleCoords, 0.0); 
}
