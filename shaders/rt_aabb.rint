#version 460
#extension GL_EXT_ray_tracing : require

//In the intersection language, built-in variables are declared as follows
//
//        // Work dimensions
//        in    uvec3  gl_LaunchIDNV;
//        in    uvec3  gl_LaunchSizeNV;
//
//        // Geometry instance ids
//        in     int   gl_PrimitiveID;
//        in     int   gl_InstanceID;
//        in     int   gl_InstanceCustomIndexNV;
//
//        // World space parameters
//        in    vec3   gl_WorldRayOriginNV;
//        in    vec3   gl_WorldRayDirectionNV;
//        in    vec3   gl_ObjectRayOriginNV;
//        in    vec3   gl_ObjectRayDirectionNV;
//
//        // Ray parameters
//        in    float  gl_RayTminNV;
//        in    float  gl_RayTmaxNV;
//        in    uint   gl_IncomingRayFlagsNV;
//
//        // Transform matrices
//        in    mat4x3 gl_ObjectToWorldNV;
//        in    mat4x3 gl_WorldToObjectNV;

struct Sphere
{
    vec3  center;
    float radius;
};

struct Ray
{
    vec3 origin;
    vec3 direction;
};

// Ray-Sphere intersection
// http://viclw17.github.io/2018/07/16/raytracing-ray-sphere-intersection/
float hitSphere(const Sphere s, const Ray r)
{
    vec3  oc           = r.origin - s.center;
    float a            = dot(r.direction, r.direction);
    float b            = 2.0 * dot(oc, r.direction);
    float c            = dot(oc, oc) - s.radius * s.radius;
    float discriminant = b * b - 4 * a * c;
    if(discriminant < 0)
    {
        return -1.0;
    }
    else
    {
        return (-b - sqrt(discriminant)) / (2.0 * a);
    }
}


// Attention (citing the posts from https://devtalk.nvidia.com/default/topic/1048039/vulkan/vk_nv_raytracing-with-procedural-geometries/?offset=5#5415670): 
//  -) I think I've found the issue. The intersection shader does not seem to behave correctly if it does not declare a hitAttribute at global scope.
//  -) Yes, you need in fact specify a hitAttributeNV, which is required to match your anyhit or closest hit shader ones if they use it.
hitAttributeEXT vec3 attribs;


void main()
{
    float tHit    = -1;

    Ray ray;
    ray.origin    = gl_ObjectRayOriginEXT;
    ray.direction = gl_ObjectRayDirectionEXT;

    Sphere s;
    s.radius = 0.5;
    s.center = vec3(0.0, 0.0, 0.0);

    tHit = hitSphere(s, ray);
    if (tHit > 0) {
        reportIntersectionEXT(tHit, 0);
    }
    // else don't report an intersection
}